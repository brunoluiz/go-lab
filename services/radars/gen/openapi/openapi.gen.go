// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// AddRadarJSONBody defines parameters for AddRadar.
type AddRadarJSONBody struct {
	Title string `json:"title"`
}

// UpdateRadarJSONBody defines parameters for UpdateRadar.
type UpdateRadarJSONBody struct {
	Title string `json:"title"`
}

// AddRadarJSONRequestBody defines body for AddRadar for application/json ContentType.
type AddRadarJSONRequestBody AddRadarJSONBody

// UpdateRadarJSONRequestBody defines body for UpdateRadar for application/json ContentType.
type UpdateRadarJSONRequestBody UpdateRadarJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Add a new radar
	// (POST /api/v1/radars)
	AddRadar(c *gin.Context)
	// Deletes a radar
	// (DELETE /api/v1/radars/{radar_id})
	DeleteRadar(c *gin.Context, radarId string)
	// Find radar by ID
	// (GET /api/v1/radars/{radar_id})
	GetRadarById(c *gin.Context, radarId string)
	// Update existing radar
	// (PUT /api/v1/radars/{radar_id})
	UpdateRadar(c *gin.Context, radarId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// AddRadar operation middleware
func (siw *ServerInterfaceWrapper) AddRadar(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddRadar(c)
}

// DeleteRadar operation middleware
func (siw *ServerInterfaceWrapper) DeleteRadar(c *gin.Context) {

	var err error

	// ------------- Path parameter "radar_id" -------------
	var radarId string

	err = runtime.BindStyledParameterWithOptions("simple", "radar_id", c.Param("radar_id"), &radarId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter radar_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteRadar(c, radarId)
}

// GetRadarById operation middleware
func (siw *ServerInterfaceWrapper) GetRadarById(c *gin.Context) {

	var err error

	// ------------- Path parameter "radar_id" -------------
	var radarId string

	err = runtime.BindStyledParameterWithOptions("simple", "radar_id", c.Param("radar_id"), &radarId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter radar_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRadarById(c, radarId)
}

// UpdateRadar operation middleware
func (siw *ServerInterfaceWrapper) UpdateRadar(c *gin.Context) {

	var err error

	// ------------- Path parameter "radar_id" -------------
	var radarId string

	err = runtime.BindStyledParameterWithOptions("simple", "radar_id", c.Param("radar_id"), &radarId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter radar_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateRadar(c, radarId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/api/v1/radars", wrapper.AddRadar)
	router.DELETE(options.BaseURL+"/api/v1/radars/:radar_id", wrapper.DeleteRadar)
	router.GET(options.BaseURL+"/api/v1/radars/:radar_id", wrapper.GetRadarById)
	router.PUT(options.BaseURL+"/api/v1/radars/:radar_id", wrapper.UpdateRadar)
}

type AddRadarRequestObject struct {
	Body *AddRadarJSONRequestBody
}

type AddRadarResponseObject interface {
	VisitAddRadarResponse(w http.ResponseWriter) error
}

type AddRadar201JSONResponse struct {
	CreatedAt time.Time `json:"created_at"`
	Items     *[]struct {
		CreatedAt   time.Time `json:"created_at"`
		Description string    `json:"description"`
		Name        string    `json:"name"`
		UniqId      string    `json:"uniq_id"`
		UpdatedAt   time.Time `json:"updated_at"`
	} `json:"items,omitempty"`
	Title     string    `json:"title"`
	UniqId    string    `json:"uniq_id"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (response AddRadar201JSONResponse) VisitAddRadarResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type AddRadar400JSONResponse struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (response AddRadar400JSONResponse) VisitAddRadarResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRadarRequestObject struct {
	RadarId string `json:"radar_id"`
}

type DeleteRadarResponseObject interface {
	VisitDeleteRadarResponse(w http.ResponseWriter) error
}

type DeleteRadar200JSONResponse struct {
	Success bool `json:"success"`
}

func (response DeleteRadar200JSONResponse) VisitDeleteRadarResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRadar404JSONResponse struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (response DeleteRadar404JSONResponse) VisitDeleteRadarResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetRadarByIdRequestObject struct {
	RadarId string `json:"radar_id"`
}

type GetRadarByIdResponseObject interface {
	VisitGetRadarByIdResponse(w http.ResponseWriter) error
}

type GetRadarById200JSONResponse struct {
	CreatedAt time.Time `json:"created_at"`
	Items     *[]struct {
		CreatedAt   time.Time `json:"created_at"`
		Description string    `json:"description"`
		Name        string    `json:"name"`
		UniqId      string    `json:"uniq_id"`
		UpdatedAt   time.Time `json:"updated_at"`
	} `json:"items,omitempty"`
	Title     string    `json:"title"`
	UniqId    string    `json:"uniq_id"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (response GetRadarById200JSONResponse) VisitGetRadarByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRadarById400JSONResponse struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (response GetRadarById400JSONResponse) VisitGetRadarByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetRadarById404JSONResponse struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (response GetRadarById404JSONResponse) VisitGetRadarByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRadarRequestObject struct {
	RadarId string `json:"radar_id"`
	Body    *UpdateRadarJSONRequestBody
}

type UpdateRadarResponseObject interface {
	VisitUpdateRadarResponse(w http.ResponseWriter) error
}

type UpdateRadar200JSONResponse struct {
	CreatedAt time.Time `json:"created_at"`
	Items     *[]struct {
		CreatedAt   time.Time `json:"created_at"`
		Description string    `json:"description"`
		Name        string    `json:"name"`
		UniqId      string    `json:"uniq_id"`
		UpdatedAt   time.Time `json:"updated_at"`
	} `json:"items,omitempty"`
	Title     string    `json:"title"`
	UniqId    string    `json:"uniq_id"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (response UpdateRadar200JSONResponse) VisitUpdateRadarResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRadar400JSONResponse struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (response UpdateRadar400JSONResponse) VisitUpdateRadarResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRadar404JSONResponse struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (response UpdateRadar404JSONResponse) VisitUpdateRadarResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Add a new radar
	// (POST /api/v1/radars)
	AddRadar(ctx context.Context, request AddRadarRequestObject) (AddRadarResponseObject, error)
	// Deletes a radar
	// (DELETE /api/v1/radars/{radar_id})
	DeleteRadar(ctx context.Context, request DeleteRadarRequestObject) (DeleteRadarResponseObject, error)
	// Find radar by ID
	// (GET /api/v1/radars/{radar_id})
	GetRadarById(ctx context.Context, request GetRadarByIdRequestObject) (GetRadarByIdResponseObject, error)
	// Update existing radar
	// (PUT /api/v1/radars/{radar_id})
	UpdateRadar(ctx context.Context, request UpdateRadarRequestObject) (UpdateRadarResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// AddRadar operation middleware
func (sh *strictHandler) AddRadar(ctx *gin.Context) {
	var request AddRadarRequestObject

	var body AddRadarJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AddRadar(ctx, request.(AddRadarRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddRadar")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AddRadarResponseObject); ok {
		if err := validResponse.VisitAddRadarResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteRadar operation middleware
func (sh *strictHandler) DeleteRadar(ctx *gin.Context, radarId string) {
	var request DeleteRadarRequestObject

	request.RadarId = radarId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteRadar(ctx, request.(DeleteRadarRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteRadar")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteRadarResponseObject); ok {
		if err := validResponse.VisitDeleteRadarResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRadarById operation middleware
func (sh *strictHandler) GetRadarById(ctx *gin.Context, radarId string) {
	var request GetRadarByIdRequestObject

	request.RadarId = radarId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRadarById(ctx, request.(GetRadarByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRadarById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetRadarByIdResponseObject); ok {
		if err := validResponse.VisitGetRadarByIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateRadar operation middleware
func (sh *strictHandler) UpdateRadar(ctx *gin.Context, radarId string) {
	var request UpdateRadarRequestObject

	request.RadarId = radarId

	var body UpdateRadarJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateRadar(ctx, request.(UpdateRadarRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateRadar")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateRadarResponseObject); ok {
		if err := validResponse.VisitUpdateRadarResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RXXU8jNxT9K5bbh1aaZsIuD1WeupSColWLRFmpqxVCl/FNYhR/YN+BTdH898ofA5nJ",
	"pEAWQfuEsX2vz5xzrn1zxyujrNGoyfPJHXd4XaOnAyMkxolTEOA+CHGaFsJUZTShjkOwdikrIGl0eeWN",
	"DnO+WqCCMLLOWHSUM5GkJYYBfgVlw5D/vmIu5OcFp5UNM56c1HPeNEWEIh0KPvmSY8/vt5nLK6yIN919",
	"5GpsigT5kxVA+L9BHWe8NdqnY381Dg9gJ9a/dzjjE/5d+aBsmVZ9+ZtzxiUAAn3lpA1J+ISfLZBl7Vk4",
	"CaT2TOobWErBpLY1ed4UEdYfho5MrcXrgPIWKzmTKJhDb2pXIbsFz7QhNosoMqo/66pC779Baf+Q4d+0",
	"vjRmiaA3xG7Dh+XuftiJRRdBsZnU0i9QsFtJC5ZzsB+0YfkrfuSto2MRJou8GPUx8RDCls728GOkg9X0",
	"8O0AtPX86uc3RU4VnZG8uuGdyoiIqXcfFFyh9zAfWuvZp91YpFybLso8DJztEAjFBUQqZsapMOKBrp9I",
	"Kty8pgouCVUMvh88StKUUIXQnAucg1X8/zkXZMFrLa8vpOgGjOsr72/PFtPjs0+f1buPPx9dnZzM/qLP",
	"ex8Hc0QvPOeLe2S3IFr0xTqJnfxbdYh0vIgWHd8NWEiDGvbWf4zKiLP7OQW/rkE40PQsisMZUs9MW+VQ",
	"RXSoQC75pJ365dLV2ixr+fdII/HN1wOrRfIhU6BhjgojjmzYtH6afXqDzqewvdF4NA7ZjEUNVvIJfz8a",
	"j97zglugRZS5BCvLm70yZo8z1qRXugvhgxAMmMbb+3ow7c0/FWm9BfDQeK22lWOnNyv7jVm/g3g33tue",
	"KO8rNx6WpuD74/Hjgb3+JN6StVLgVoOfTTD3wS2ZsPOwv0tieRf/XkjRJB6XSLjJ6GGcZ7CF0LTccmrB",
	"gULCINGXfqa4iUnByLB8WnAdn0SZWz9PeAuL93u2Yu2J6dfI+YYYT+R07dnbH+8/Lea+IeuqkLjwa1x1",
	"VODnTcHnOODaU6Ta6RDopZ4vcQvXx0iRw4PVVDxG9vSQmVkuRjLMxRPemu/BxmbXAvh2vY6kFpmiyxWb",
	"Hg4KZusBwVJvxPCr9JKknm8RLLdQTymOk5pSrx1hvKhKu1xz3R9zzc5i95rIt9N6TbGOYH3Bm6b5JwAA",
	"//8fz21Bog8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
