// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: radars.sql

package repo

import (
	"context"
)

const deleteRadar = `-- name: DeleteRadar :exec
DELETE FROM radars
WHERE uniq_id = $1
`

func (q *Queries) DeleteRadar(ctx context.Context, uniqID string) error {
	_, err := q.db.ExecContext(ctx, deleteRadar, uniqID)
	return err
}

const getRadarByID = `-- name: GetRadarByID :one
SELECT r.id, r.uniq_id, r.title, r.updated_at, r.created_at, ri.id, ri.uniq_id, ri.radar_id, ri.quadrant_id, ri.name, ri.description, ri.updated_at, ri.created_at, rq.id, rq.uniq_id, rq.radar_id, rq.name
FROM radars r
JOIN radar_items ri ON ri.radar_id = r.id
JOIN radar_quadrants rq ON ri.quadrant_id = rq.id
WHERE r.uniq_id = $1 LIMIT 1
`

type GetRadarByIDRow struct {
	Radar         Radar         `json:"radar"`
	RadarItem     RadarItem     `json:"radar_item"`
	RadarQuadrant RadarQuadrant `json:"radar_quadrant"`
}

func (q *Queries) GetRadarByID(ctx context.Context, uniqID string) (GetRadarByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getRadarByID, uniqID)
	var i GetRadarByIDRow
	err := row.Scan(
		&i.Radar.ID,
		&i.Radar.UniqID,
		&i.Radar.Title,
		&i.Radar.UpdatedAt,
		&i.Radar.CreatedAt,
		&i.RadarItem.ID,
		&i.RadarItem.UniqID,
		&i.RadarItem.RadarID,
		&i.RadarItem.QuadrantID,
		&i.RadarItem.Name,
		&i.RadarItem.Description,
		&i.RadarItem.UpdatedAt,
		&i.RadarItem.CreatedAt,
		&i.RadarQuadrant.ID,
		&i.RadarQuadrant.UniqID,
		&i.RadarQuadrant.RadarID,
		&i.RadarQuadrant.Name,
	)
	return i, err
}

const getRadars = `-- name: GetRadars :many
SELECT r.id, r.uniq_id, r.title, r.updated_at, r.created_at, ri.id, ri.uniq_id, ri.radar_id, ri.quadrant_id, ri.name, ri.description, ri.updated_at, ri.created_at, rq.id, rq.uniq_id, rq.radar_id, rq.name
FROM radars r
JOIN radar_items ri ON ri.radar_id = r.id
JOIN radar_quadrants rq ON ri.quadrant_id = rq.id
`

type GetRadarsRow struct {
	Radar         Radar         `json:"radar"`
	RadarItem     RadarItem     `json:"radar_item"`
	RadarQuadrant RadarQuadrant `json:"radar_quadrant"`
}

func (q *Queries) GetRadars(ctx context.Context) ([]GetRadarsRow, error) {
	rows, err := q.db.QueryContext(ctx, getRadars)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRadarsRow
	for rows.Next() {
		var i GetRadarsRow
		if err := rows.Scan(
			&i.Radar.ID,
			&i.Radar.UniqID,
			&i.Radar.Title,
			&i.Radar.UpdatedAt,
			&i.Radar.CreatedAt,
			&i.RadarItem.ID,
			&i.RadarItem.UniqID,
			&i.RadarItem.RadarID,
			&i.RadarItem.QuadrantID,
			&i.RadarItem.Name,
			&i.RadarItem.Description,
			&i.RadarItem.UpdatedAt,
			&i.RadarItem.CreatedAt,
			&i.RadarQuadrant.ID,
			&i.RadarQuadrant.UniqID,
			&i.RadarQuadrant.RadarID,
			&i.RadarQuadrant.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveRadar = `-- name: SaveRadar :one
INSERT INTO radars (
  uniq_id,
  title
) VALUES ($1, $2)
ON CONFLICT (uniq_id, quadrant_id) DO UPDATE
SET
  title = EXCLUDED.title
RETURNING id, uniq_id, title, updated_at, created_at
`

type SaveRadarParams struct {
	UniqID string `json:"uniq_id"`
	Title  string `json:"title"`
}

func (q *Queries) SaveRadar(ctx context.Context, arg SaveRadarParams) (Radar, error) {
	row := q.db.QueryRowContext(ctx, saveRadar, arg.UniqID, arg.Title)
	var i Radar
	err := row.Scan(
		&i.ID,
		&i.UniqID,
		&i.Title,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
