// Code generated by MockGen. DO NOT EDIT.
// Source: services/todo/internal/database/repository/list_repository.go
//
// Generated by this command:
//
//	mockgen -source=services/todo/internal/database/repository/list_repository.go -destination=services/todo/internal/connectrpc/mock/list_repository.go -package=mock ListRepository
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/brunoluiz/go-lab/services/todo/internal/database/model"
	gomock "go.uber.org/mock/gomock"
)

// MockListRepository is a mock of ListRepository interface.
type MockListRepository struct {
	ctrl     *gomock.Controller
	recorder *MockListRepositoryMockRecorder
	isgomock struct{}
}

// MockListRepositoryMockRecorder is the mock recorder for MockListRepository.
type MockListRepositoryMockRecorder struct {
	mock *MockListRepository
}

// NewMockListRepository creates a new mock instance.
func NewMockListRepository(ctrl *gomock.Controller) *MockListRepository {
	mock := &MockListRepository{ctrl: ctrl}
	mock.recorder = &MockListRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListRepository) EXPECT() *MockListRepositoryMockRecorder {
	return m.recorder
}

// CreateList mocks base method.
func (m *MockListRepository) CreateList(ctx context.Context, req model.List) (model.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateList", ctx, req)
	ret0, _ := ret[0].(model.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateList indicates an expected call of CreateList.
func (mr *MockListRepositoryMockRecorder) CreateList(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateList", reflect.TypeOf((*MockListRepository)(nil).CreateList), ctx, req)
}

// DeleteList mocks base method.
func (m *MockListRepository) DeleteList(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteList", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteList indicates an expected call of DeleteList.
func (mr *MockListRepositoryMockRecorder) DeleteList(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteList", reflect.TypeOf((*MockListRepository)(nil).DeleteList), ctx, id)
}

// GetList mocks base method.
func (m *MockListRepository) GetList(ctx context.Context, id string) (model.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", ctx, id)
	ret0, _ := ret[0].(model.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList.
func (mr *MockListRepositoryMockRecorder) GetList(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockListRepository)(nil).GetList), ctx, id)
}

// ListLists mocks base method.
func (m *MockListRepository) ListLists(ctx context.Context) ([]model.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLists", ctx)
	ret0, _ := ret[0].([]model.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLists indicates an expected call of ListLists.
func (mr *MockListRepositoryMockRecorder) ListLists(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLists", reflect.TypeOf((*MockListRepository)(nil).ListLists), ctx)
}

// UpdateList mocks base method.
func (m *MockListRepository) UpdateList(ctx context.Context, list model.List) (model.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateList", ctx, list)
	ret0, _ := ret[0].(model.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateList indicates an expected call of UpdateList.
func (mr *MockListRepositoryMockRecorder) UpdateList(ctx, list any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateList", reflect.TypeOf((*MockListRepository)(nil).UpdateList), ctx, list)
}
