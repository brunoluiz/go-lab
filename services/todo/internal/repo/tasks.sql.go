// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: tasks.sql

package repo

import (
	"context"
)

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks
WHERE uniq_id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, uniqID string) error {
	_, err := q.db.ExecContext(ctx, deleteTask, uniqID)
	return err
}

const getTaskByID = `-- name: GetTaskByID :one
SELECT id, uniq_id, task_uniq_id, title, position, status, updated_at, created_at FROM tasks
WHERE uniq_id = $1 LIMIT 1
`

func (q *Queries) GetTaskByID(ctx context.Context, uniqID string) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTaskByID, uniqID)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.UniqID,
		&i.TaskUniqID,
		&i.Title,
		&i.Position,
		&i.Status,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getTasks = `-- name: GetTasks :many
SELECT id, uniq_id, task_uniq_id, title, position, status, updated_at, created_at FROM tasks
`

func (q *Queries) GetTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.UniqID,
			&i.TaskUniqID,
			&i.Title,
			&i.Position,
			&i.Status,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveTask = `-- name: SaveTask :one
INSERT INTO tasks (
  uniq_id,
  task_uniq_id,
  title
) VALUES ($1, $2, $3)
ON CONFLICT (uniq_id) DO UPDATE
SET
  title = EXCLUDED.title
RETURNING id, uniq_id, task_uniq_id, title, position, status, updated_at, created_at
`

type SaveTaskParams struct {
	UniqID     string `json:"uniq_id"`
	TaskUniqID string `json:"task_uniq_id"`
	Title      string `json:"title"`
}

func (q *Queries) SaveTask(ctx context.Context, arg SaveTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, saveTask, arg.UniqID, arg.TaskUniqID, arg.Title)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.UniqID,
		&i.TaskUniqID,
		&i.Title,
		&i.Position,
		&i.Status,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
