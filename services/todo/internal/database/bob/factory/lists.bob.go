// Code generated by BobGen sql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	"github.com/aarondl/opt/omit"
	models "github.com/brunoluiz/go-lab/services/todo/internal/database/bob/models"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
)

type ListMod interface {
	Apply(context.Context, *ListTemplate)
}

type ListModFunc func(context.Context, *ListTemplate)

func (f ListModFunc) Apply(ctx context.Context, n *ListTemplate) {
	f(ctx, n)
}

type ListModSlice []ListMod

func (mods ListModSlice) Apply(ctx context.Context, n *ListTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// ListTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type ListTemplate struct {
	ID        func() string
	Name      func() string
	CreatedAt func() time.Time

	r listR
	f *Factory

	alreadyPersisted bool
}

type listR struct {
	Tasks []*listRTasksR
}

type listRTasksR struct {
	number int
	o      *TaskTemplate
}

// Apply mods to the ListTemplate
func (o *ListTemplate) Apply(ctx context.Context, mods ...ListMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.List
// according to the relationships in the template. Nothing is inserted into the db
func (t ListTemplate) setModelRels(o *models.List) {
	if t.r.Tasks != nil {
		rel := models.TaskSlice{}
		for _, r := range t.r.Tasks {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.ListID = o.ID // h2
				rel.R.List = o
			}
			rel = append(rel, related...)
		}
		o.R.Tasks = rel
	}
}

// BuildSetter returns an *models.ListSetter
// this does nothing with the relationship templates
func (o ListTemplate) BuildSetter() *models.ListSetter {
	m := &models.ListSetter{}

	if o.ID != nil {
		val := o.ID()
		m.ID = omit.From(val)
	}
	if o.Name != nil {
		val := o.Name()
		m.Name = omit.From(val)
	}
	if o.CreatedAt != nil {
		val := o.CreatedAt()
		m.CreatedAt = omit.From(val)
	}

	return m
}

// BuildManySetter returns an []*models.ListSetter
// this does nothing with the relationship templates
func (o ListTemplate) BuildManySetter(number int) []*models.ListSetter {
	m := make([]*models.ListSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.List
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use ListTemplate.Create
func (o ListTemplate) Build() *models.List {
	m := &models.List{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.Name != nil {
		m.Name = o.Name()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.ListSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use ListTemplate.CreateMany
func (o ListTemplate) BuildMany(number int) models.ListSlice {
	m := make(models.ListSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableList(m *models.ListSetter) {
	if !(m.ID.IsValue()) {
		val := random_string(nil)
		m.ID = omit.From(val)
	}
	if !(m.Name.IsValue()) {
		val := random_string(nil)
		m.Name = omit.From(val)
	}
	if !(m.CreatedAt.IsValue()) {
		val := random_time_Time(nil)
		m.CreatedAt = omit.From(val)
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.List
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *ListTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.List) error {
	var err error

	isTasksDone, _ := listRelTasksCtx.Value(ctx)
	if !isTasksDone && o.r.Tasks != nil {
		ctx = listRelTasksCtx.WithValue(ctx, true)
		for _, r := range o.r.Tasks {
			if r.o.alreadyPersisted {
				m.R.Tasks = append(m.R.Tasks, r.o.Build())
			} else {
				rel0, err := r.o.CreateMany(ctx, exec, r.number)
				if err != nil {
					return err
				}

				err = m.AttachTasks(ctx, exec, rel0...)
				if err != nil {
					return err
				}
			}
		}
	}

	return err
}

// Create builds a list and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *ListTemplate) Create(ctx context.Context, exec bob.Executor) (*models.List, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableList(opt)

	m, err := models.Lists.Insert(opt).One(ctx, exec)
	if err != nil {
		return nil, err
	}

	if err := o.insertOptRels(ctx, exec, m); err != nil {
		return nil, err
	}
	return m, err
}

// MustCreate builds a list and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *ListTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.List {
	m, err := o.Create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a list and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *ListTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.List {
	tb.Helper()
	m, err := o.Create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// CreateMany builds multiple lists and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o ListTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.ListSlice, error) {
	var err error
	m := make(models.ListSlice, number)

	for i := range m {
		m[i], err = o.Create(ctx, exec)
		if err != nil {
			return nil, err
		}
	}

	return m, nil
}

// MustCreateMany builds multiple lists and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o ListTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.ListSlice {
	m, err := o.CreateMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple lists and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o ListTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.ListSlice {
	tb.Helper()
	m, err := o.CreateMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// List has methods that act as mods for the ListTemplate
var ListMods listMods

type listMods struct{}

func (m listMods) RandomizeAllColumns(f *faker.Faker) ListMod {
	return ListModSlice{
		ListMods.RandomID(f),
		ListMods.RandomName(f),
		ListMods.RandomCreatedAt(f),
	}
}

// Set the model columns to this value
func (m listMods) ID(val string) ListMod {
	return ListModFunc(func(_ context.Context, o *ListTemplate) {
		o.ID = func() string { return val }
	})
}

// Set the Column from the function
func (m listMods) IDFunc(f func() string) ListMod {
	return ListModFunc(func(_ context.Context, o *ListTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m listMods) UnsetID() ListMod {
	return ListModFunc(func(_ context.Context, o *ListTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m listMods) RandomID(f *faker.Faker) ListMod {
	return ListModFunc(func(_ context.Context, o *ListTemplate) {
		o.ID = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m listMods) Name(val string) ListMod {
	return ListModFunc(func(_ context.Context, o *ListTemplate) {
		o.Name = func() string { return val }
	})
}

// Set the Column from the function
func (m listMods) NameFunc(f func() string) ListMod {
	return ListModFunc(func(_ context.Context, o *ListTemplate) {
		o.Name = f
	})
}

// Clear any values for the column
func (m listMods) UnsetName() ListMod {
	return ListModFunc(func(_ context.Context, o *ListTemplate) {
		o.Name = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m listMods) RandomName(f *faker.Faker) ListMod {
	return ListModFunc(func(_ context.Context, o *ListTemplate) {
		o.Name = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m listMods) CreatedAt(val time.Time) ListMod {
	return ListModFunc(func(_ context.Context, o *ListTemplate) {
		o.CreatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m listMods) CreatedAtFunc(f func() time.Time) ListMod {
	return ListModFunc(func(_ context.Context, o *ListTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m listMods) UnsetCreatedAt() ListMod {
	return ListModFunc(func(_ context.Context, o *ListTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m listMods) RandomCreatedAt(f *faker.Faker) ListMod {
	return ListModFunc(func(_ context.Context, o *ListTemplate) {
		o.CreatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

func (m listMods) WithParentsCascading() ListMod {
	return ListModFunc(func(ctx context.Context, o *ListTemplate) {
		if isDone, _ := listWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = listWithParentsCascadingCtx.WithValue(ctx, true)
	})
}

func (m listMods) WithTasks(number int, related *TaskTemplate) ListMod {
	return ListModFunc(func(ctx context.Context, o *ListTemplate) {
		o.r.Tasks = []*listRTasksR{{
			number: number,
			o:      related,
		}}
	})
}

func (m listMods) WithNewTasks(number int, mods ...TaskMod) ListMod {
	return ListModFunc(func(ctx context.Context, o *ListTemplate) {
		related := o.f.NewTaskWithContext(ctx, mods...)
		m.WithTasks(number, related).Apply(ctx, o)
	})
}

func (m listMods) AddTasks(number int, related *TaskTemplate) ListMod {
	return ListModFunc(func(ctx context.Context, o *ListTemplate) {
		o.r.Tasks = append(o.r.Tasks, &listRTasksR{
			number: number,
			o:      related,
		})
	})
}

func (m listMods) AddNewTasks(number int, mods ...TaskMod) ListMod {
	return ListModFunc(func(ctx context.Context, o *ListTemplate) {
		related := o.f.NewTaskWithContext(ctx, mods...)
		m.AddTasks(number, related).Apply(ctx, o)
	})
}

func (m listMods) AddExistingTasks(existingModels ...*models.Task) ListMod {
	return ListModFunc(func(ctx context.Context, o *ListTemplate) {
		for _, em := range existingModels {
			o.r.Tasks = append(o.r.Tasks, &listRTasksR{
				o: o.f.FromExistingTask(em),
			})
		}
	})
}

func (m listMods) WithoutTasks() ListMod {
	return ListModFunc(func(ctx context.Context, o *ListTemplate) {
		o.r.Tasks = nil
	})
}
