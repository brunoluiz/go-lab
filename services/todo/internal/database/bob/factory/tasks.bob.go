// Code generated by BobGen sql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	"github.com/aarondl/opt/omit"
	models "github.com/brunoluiz/go-lab/services/todo/internal/database/bob/models"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
)

type TaskMod interface {
	Apply(context.Context, *TaskTemplate)
}

type TaskModFunc func(context.Context, *TaskTemplate)

func (f TaskModFunc) Apply(ctx context.Context, n *TaskTemplate) {
	f(ctx, n)
}

type TaskModSlice []TaskMod

func (mods TaskModSlice) Apply(ctx context.Context, n *TaskTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// TaskTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type TaskTemplate struct {
	ID          func() string
	Title       func() string
	IsCompleted func() bool
	CreatedAt   func() time.Time

	f *Factory

	alreadyPersisted bool
}

// Apply mods to the TaskTemplate
func (o *TaskTemplate) Apply(ctx context.Context, mods ...TaskMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.Task
// according to the relationships in the template. Nothing is inserted into the db
func (t TaskTemplate) setModelRels(o *models.Task) {}

// BuildSetter returns an *models.TaskSetter
// this does nothing with the relationship templates
func (o TaskTemplate) BuildSetter() *models.TaskSetter {
	m := &models.TaskSetter{}

	if o.ID != nil {
		val := o.ID()
		m.ID = omit.From(val)
	}
	if o.Title != nil {
		val := o.Title()
		m.Title = omit.From(val)
	}
	if o.IsCompleted != nil {
		val := o.IsCompleted()
		m.IsCompleted = omit.From(val)
	}
	if o.CreatedAt != nil {
		val := o.CreatedAt()
		m.CreatedAt = omit.From(val)
	}

	return m
}

// BuildManySetter returns an []*models.TaskSetter
// this does nothing with the relationship templates
func (o TaskTemplate) BuildManySetter(number int) []*models.TaskSetter {
	m := make([]*models.TaskSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Task
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use TaskTemplate.Create
func (o TaskTemplate) Build() *models.Task {
	m := &models.Task{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.Title != nil {
		m.Title = o.Title()
	}
	if o.IsCompleted != nil {
		m.IsCompleted = o.IsCompleted()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.TaskSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use TaskTemplate.CreateMany
func (o TaskTemplate) BuildMany(number int) models.TaskSlice {
	m := make(models.TaskSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableTask(m *models.TaskSetter) {
	if !(m.ID.IsValue()) {
		val := random_string(nil)
		m.ID = omit.From(val)
	}
	if !(m.Title.IsValue()) {
		val := random_string(nil)
		m.Title = omit.From(val)
	}
	if !(m.CreatedAt.IsValue()) {
		val := random_time_Time(nil)
		m.CreatedAt = omit.From(val)
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.Task
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *TaskTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Task) error {
	var err error

	return err
}

// Create builds a task and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *TaskTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Task, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableTask(opt)

	m, err := models.Tasks.Insert(opt).One(ctx, exec)
	if err != nil {
		return nil, err
	}

	if err := o.insertOptRels(ctx, exec, m); err != nil {
		return nil, err
	}
	return m, err
}

// MustCreate builds a task and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *TaskTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.Task {
	m, err := o.Create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a task and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *TaskTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.Task {
	tb.Helper()
	m, err := o.Create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// CreateMany builds multiple tasks and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o TaskTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.TaskSlice, error) {
	var err error
	m := make(models.TaskSlice, number)

	for i := range m {
		m[i], err = o.Create(ctx, exec)
		if err != nil {
			return nil, err
		}
	}

	return m, nil
}

// MustCreateMany builds multiple tasks and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o TaskTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.TaskSlice {
	m, err := o.CreateMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple tasks and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o TaskTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.TaskSlice {
	tb.Helper()
	m, err := o.CreateMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// Task has methods that act as mods for the TaskTemplate
var TaskMods taskMods

type taskMods struct{}

func (m taskMods) RandomizeAllColumns(f *faker.Faker) TaskMod {
	return TaskModSlice{
		TaskMods.RandomID(f),
		TaskMods.RandomTitle(f),
		TaskMods.RandomIsCompleted(f),
		TaskMods.RandomCreatedAt(f),
	}
}

// Set the model columns to this value
func (m taskMods) ID(val string) TaskMod {
	return TaskModFunc(func(_ context.Context, o *TaskTemplate) {
		o.ID = func() string { return val }
	})
}

// Set the Column from the function
func (m taskMods) IDFunc(f func() string) TaskMod {
	return TaskModFunc(func(_ context.Context, o *TaskTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m taskMods) UnsetID() TaskMod {
	return TaskModFunc(func(_ context.Context, o *TaskTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m taskMods) RandomID(f *faker.Faker) TaskMod {
	return TaskModFunc(func(_ context.Context, o *TaskTemplate) {
		o.ID = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m taskMods) Title(val string) TaskMod {
	return TaskModFunc(func(_ context.Context, o *TaskTemplate) {
		o.Title = func() string { return val }
	})
}

// Set the Column from the function
func (m taskMods) TitleFunc(f func() string) TaskMod {
	return TaskModFunc(func(_ context.Context, o *TaskTemplate) {
		o.Title = f
	})
}

// Clear any values for the column
func (m taskMods) UnsetTitle() TaskMod {
	return TaskModFunc(func(_ context.Context, o *TaskTemplate) {
		o.Title = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m taskMods) RandomTitle(f *faker.Faker) TaskMod {
	return TaskModFunc(func(_ context.Context, o *TaskTemplate) {
		o.Title = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m taskMods) IsCompleted(val bool) TaskMod {
	return TaskModFunc(func(_ context.Context, o *TaskTemplate) {
		o.IsCompleted = func() bool { return val }
	})
}

// Set the Column from the function
func (m taskMods) IsCompletedFunc(f func() bool) TaskMod {
	return TaskModFunc(func(_ context.Context, o *TaskTemplate) {
		o.IsCompleted = f
	})
}

// Clear any values for the column
func (m taskMods) UnsetIsCompleted() TaskMod {
	return TaskModFunc(func(_ context.Context, o *TaskTemplate) {
		o.IsCompleted = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m taskMods) RandomIsCompleted(f *faker.Faker) TaskMod {
	return TaskModFunc(func(_ context.Context, o *TaskTemplate) {
		o.IsCompleted = func() bool {
			return random_bool(f)
		}
	})
}

// Set the model columns to this value
func (m taskMods) CreatedAt(val time.Time) TaskMod {
	return TaskModFunc(func(_ context.Context, o *TaskTemplate) {
		o.CreatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m taskMods) CreatedAtFunc(f func() time.Time) TaskMod {
	return TaskModFunc(func(_ context.Context, o *TaskTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m taskMods) UnsetCreatedAt() TaskMod {
	return TaskModFunc(func(_ context.Context, o *TaskTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m taskMods) RandomCreatedAt(f *faker.Faker) TaskMod {
	return TaskModFunc(func(_ context.Context, o *TaskTemplate) {
		o.CreatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

func (m taskMods) WithParentsCascading() TaskMod {
	return TaskModFunc(func(ctx context.Context, o *TaskTemplate) {
		if isDone, _ := taskWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = taskWithParentsCascadingCtx.WithValue(ctx, true)
	})
}
