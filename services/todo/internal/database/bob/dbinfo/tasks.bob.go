// Code generated by BobGen sql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbinfo

import "github.com/aarondl/opt/null"

var Tasks = Table[
	taskColumns,
	taskIndexes,
	taskForeignKeys,
	taskUniques,
	taskChecks,
]{
	Schema: "",
	Name:   "tasks",
	Columns: taskColumns{
		ID: column{
			Name:      "id",
			DBType:    "text",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		Title: column{
			Name:      "title",
			DBType:    "text",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		IsCompleted: column{
			Name:      "is_completed",
			DBType:    "boolean",
			Default:   "false",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		CreatedAt: column{
			Name:      "created_at",
			DBType:    "timestamp with time zone",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		ListID: column{
			Name:      "list_id",
			DBType:    "text",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
	},
	Indexes: taskIndexes{
		TasksPkey: index{
			Type: "btree",
			Name: "tasks_pkey",
			Columns: []indexColumn{
				{
					Name:         "id",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:        true,
			Comment:       "",
			NullsFirst:    []bool{false},
			NullsDistinct: false,
			Where:         "",
			Include:       []string{},
		},
	},
	PrimaryKey: &constraint{
		Name:    "tasks_pkey",
		Columns: []string{"id"},
		Comment: "",
	},
	ForeignKeys: taskForeignKeys{
		TasksTasksListIDFkey: foreignKey{
			constraint: constraint{
				Name:    "tasks.tasks_list_id_fkey",
				Columns: []string{"list_id"},
				Comment: "",
			},
			ForeignTable:   "lists",
			ForeignColumns: []string{"id"},
		},
	},

	Comment: "",
}

type taskColumns struct {
	ID          column
	Title       column
	IsCompleted column
	CreatedAt   column
	ListID      column
}

func (c taskColumns) AsSlice() []column {
	return []column{
		c.ID, c.Title, c.IsCompleted, c.CreatedAt, c.ListID,
	}
}

type taskIndexes struct {
	TasksPkey index
}

func (i taskIndexes) AsSlice() []index {
	return []index{
		i.TasksPkey,
	}
}

type taskForeignKeys struct {
	TasksTasksListIDFkey foreignKey
}

func (f taskForeignKeys) AsSlice() []foreignKey {
	return []foreignKey{
		f.TasksTasksListIDFkey,
	}
}

type taskUniques struct{}

func (u taskUniques) AsSlice() []constraint {
	return []constraint{}
}

type taskChecks struct{}

func (c taskChecks) AsSlice() []check {
	return []check{}
}
