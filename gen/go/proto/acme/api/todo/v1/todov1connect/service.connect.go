// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: acme/api/todo/v1/service.proto

package todov1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/brunoluiz/go-lab/gen/go/proto/acme/api/todo/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TodoServiceName is the fully-qualified name of the TodoService service.
	TodoServiceName = "acme.api.todo.v1.TodoService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TodoServiceCreateTaskProcedure is the fully-qualified name of the TodoService's CreateTask RPC.
	TodoServiceCreateTaskProcedure = "/acme.api.todo.v1.TodoService/CreateTask"
	// TodoServiceGetTaskProcedure is the fully-qualified name of the TodoService's GetTask RPC.
	TodoServiceGetTaskProcedure = "/acme.api.todo.v1.TodoService/GetTask"
	// TodoServiceListTasksProcedure is the fully-qualified name of the TodoService's ListTasks RPC.
	TodoServiceListTasksProcedure = "/acme.api.todo.v1.TodoService/ListTasks"
	// TodoServiceUpdateTaskProcedure is the fully-qualified name of the TodoService's UpdateTask RPC.
	TodoServiceUpdateTaskProcedure = "/acme.api.todo.v1.TodoService/UpdateTask"
	// TodoServiceDeleteTaskProcedure is the fully-qualified name of the TodoService's DeleteTask RPC.
	TodoServiceDeleteTaskProcedure = "/acme.api.todo.v1.TodoService/DeleteTask"
)

// TodoServiceClient is a client for the acme.api.todo.v1.TodoService service.
type TodoServiceClient interface {
	CreateTask(context.Context, *v1.CreateTaskRequest) (*v1.CreateTaskResponse, error)
	GetTask(context.Context, *v1.GetTaskRequest) (*v1.GetTaskResponse, error)
	ListTasks(context.Context, *v1.ListTasksRequest) (*v1.ListTasksResponse, error)
	UpdateTask(context.Context, *v1.UpdateTaskRequest) (*v1.UpdateTaskResponse, error)
	DeleteTask(context.Context, *v1.DeleteTaskRequest) (*v1.DeleteTaskResponse, error)
}

// NewTodoServiceClient constructs a client for the acme.api.todo.v1.TodoService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTodoServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TodoServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	todoServiceMethods := v1.File_acme_api_todo_v1_service_proto.Services().ByName("TodoService").Methods()
	return &todoServiceClient{
		createTask: connect.NewClient[v1.CreateTaskRequest, v1.CreateTaskResponse](
			httpClient,
			baseURL+TodoServiceCreateTaskProcedure,
			connect.WithSchema(todoServiceMethods.ByName("CreateTask")),
			connect.WithClientOptions(opts...),
		),
		getTask: connect.NewClient[v1.GetTaskRequest, v1.GetTaskResponse](
			httpClient,
			baseURL+TodoServiceGetTaskProcedure,
			connect.WithSchema(todoServiceMethods.ByName("GetTask")),
			connect.WithClientOptions(opts...),
		),
		listTasks: connect.NewClient[v1.ListTasksRequest, v1.ListTasksResponse](
			httpClient,
			baseURL+TodoServiceListTasksProcedure,
			connect.WithSchema(todoServiceMethods.ByName("ListTasks")),
			connect.WithClientOptions(opts...),
		),
		updateTask: connect.NewClient[v1.UpdateTaskRequest, v1.UpdateTaskResponse](
			httpClient,
			baseURL+TodoServiceUpdateTaskProcedure,
			connect.WithSchema(todoServiceMethods.ByName("UpdateTask")),
			connect.WithClientOptions(opts...),
		),
		deleteTask: connect.NewClient[v1.DeleteTaskRequest, v1.DeleteTaskResponse](
			httpClient,
			baseURL+TodoServiceDeleteTaskProcedure,
			connect.WithSchema(todoServiceMethods.ByName("DeleteTask")),
			connect.WithClientOptions(opts...),
		),
	}
}

// todoServiceClient implements TodoServiceClient.
type todoServiceClient struct {
	createTask *connect.Client[v1.CreateTaskRequest, v1.CreateTaskResponse]
	getTask    *connect.Client[v1.GetTaskRequest, v1.GetTaskResponse]
	listTasks  *connect.Client[v1.ListTasksRequest, v1.ListTasksResponse]
	updateTask *connect.Client[v1.UpdateTaskRequest, v1.UpdateTaskResponse]
	deleteTask *connect.Client[v1.DeleteTaskRequest, v1.DeleteTaskResponse]
}

// CreateTask calls acme.api.todo.v1.TodoService.CreateTask.
func (c *todoServiceClient) CreateTask(ctx context.Context, req *v1.CreateTaskRequest) (*v1.CreateTaskResponse, error) {
	response, err := c.createTask.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// GetTask calls acme.api.todo.v1.TodoService.GetTask.
func (c *todoServiceClient) GetTask(ctx context.Context, req *v1.GetTaskRequest) (*v1.GetTaskResponse, error) {
	response, err := c.getTask.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ListTasks calls acme.api.todo.v1.TodoService.ListTasks.
func (c *todoServiceClient) ListTasks(ctx context.Context, req *v1.ListTasksRequest) (*v1.ListTasksResponse, error) {
	response, err := c.listTasks.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// UpdateTask calls acme.api.todo.v1.TodoService.UpdateTask.
func (c *todoServiceClient) UpdateTask(ctx context.Context, req *v1.UpdateTaskRequest) (*v1.UpdateTaskResponse, error) {
	response, err := c.updateTask.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// DeleteTask calls acme.api.todo.v1.TodoService.DeleteTask.
func (c *todoServiceClient) DeleteTask(ctx context.Context, req *v1.DeleteTaskRequest) (*v1.DeleteTaskResponse, error) {
	response, err := c.deleteTask.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// TodoServiceHandler is an implementation of the acme.api.todo.v1.TodoService service.
type TodoServiceHandler interface {
	CreateTask(context.Context, *v1.CreateTaskRequest) (*v1.CreateTaskResponse, error)
	GetTask(context.Context, *v1.GetTaskRequest) (*v1.GetTaskResponse, error)
	ListTasks(context.Context, *v1.ListTasksRequest) (*v1.ListTasksResponse, error)
	UpdateTask(context.Context, *v1.UpdateTaskRequest) (*v1.UpdateTaskResponse, error)
	DeleteTask(context.Context, *v1.DeleteTaskRequest) (*v1.DeleteTaskResponse, error)
}

// NewTodoServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTodoServiceHandler(svc TodoServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	todoServiceMethods := v1.File_acme_api_todo_v1_service_proto.Services().ByName("TodoService").Methods()
	todoServiceCreateTaskHandler := connect.NewUnaryHandlerSimple(
		TodoServiceCreateTaskProcedure,
		svc.CreateTask,
		connect.WithSchema(todoServiceMethods.ByName("CreateTask")),
		connect.WithHandlerOptions(opts...),
	)
	todoServiceGetTaskHandler := connect.NewUnaryHandlerSimple(
		TodoServiceGetTaskProcedure,
		svc.GetTask,
		connect.WithSchema(todoServiceMethods.ByName("GetTask")),
		connect.WithHandlerOptions(opts...),
	)
	todoServiceListTasksHandler := connect.NewUnaryHandlerSimple(
		TodoServiceListTasksProcedure,
		svc.ListTasks,
		connect.WithSchema(todoServiceMethods.ByName("ListTasks")),
		connect.WithHandlerOptions(opts...),
	)
	todoServiceUpdateTaskHandler := connect.NewUnaryHandlerSimple(
		TodoServiceUpdateTaskProcedure,
		svc.UpdateTask,
		connect.WithSchema(todoServiceMethods.ByName("UpdateTask")),
		connect.WithHandlerOptions(opts...),
	)
	todoServiceDeleteTaskHandler := connect.NewUnaryHandlerSimple(
		TodoServiceDeleteTaskProcedure,
		svc.DeleteTask,
		connect.WithSchema(todoServiceMethods.ByName("DeleteTask")),
		connect.WithHandlerOptions(opts...),
	)
	return "/acme.api.todo.v1.TodoService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TodoServiceCreateTaskProcedure:
			todoServiceCreateTaskHandler.ServeHTTP(w, r)
		case TodoServiceGetTaskProcedure:
			todoServiceGetTaskHandler.ServeHTTP(w, r)
		case TodoServiceListTasksProcedure:
			todoServiceListTasksHandler.ServeHTTP(w, r)
		case TodoServiceUpdateTaskProcedure:
			todoServiceUpdateTaskHandler.ServeHTTP(w, r)
		case TodoServiceDeleteTaskProcedure:
			todoServiceDeleteTaskHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTodoServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTodoServiceHandler struct{}

func (UnimplementedTodoServiceHandler) CreateTask(context.Context, *v1.CreateTaskRequest) (*v1.CreateTaskResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("acme.api.todo.v1.TodoService.CreateTask is not implemented"))
}

func (UnimplementedTodoServiceHandler) GetTask(context.Context, *v1.GetTaskRequest) (*v1.GetTaskResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("acme.api.todo.v1.TodoService.GetTask is not implemented"))
}

func (UnimplementedTodoServiceHandler) ListTasks(context.Context, *v1.ListTasksRequest) (*v1.ListTasksResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("acme.api.todo.v1.TodoService.ListTasks is not implemented"))
}

func (UnimplementedTodoServiceHandler) UpdateTask(context.Context, *v1.UpdateTaskRequest) (*v1.UpdateTaskResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("acme.api.todo.v1.TodoService.UpdateTask is not implemented"))
}

func (UnimplementedTodoServiceHandler) DeleteTask(context.Context, *v1.DeleteTaskRequest) (*v1.DeleteTaskResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("acme.api.todo.v1.TodoService.DeleteTask is not implemented"))
}
