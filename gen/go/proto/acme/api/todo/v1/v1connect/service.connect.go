// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: acme/api/todo/v1/service.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/brunoluiz/go-lab/gen/go/proto/acme/api/todo/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TodoName is the fully-qualified name of the Todo service.
	TodoName = "todoapp.Todo"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TodoCreateTaskProcedure is the fully-qualified name of the Todo's CreateTask RPC.
	TodoCreateTaskProcedure = "/todoapp.Todo/CreateTask"
	// TodoGetTaskProcedure is the fully-qualified name of the Todo's GetTask RPC.
	TodoGetTaskProcedure = "/todoapp.Todo/GetTask"
	// TodoListTasksProcedure is the fully-qualified name of the Todo's ListTasks RPC.
	TodoListTasksProcedure = "/todoapp.Todo/ListTasks"
	// TodoUpdateTaskProcedure is the fully-qualified name of the Todo's UpdateTask RPC.
	TodoUpdateTaskProcedure = "/todoapp.Todo/UpdateTask"
	// TodoDeleteTaskProcedure is the fully-qualified name of the Todo's DeleteTask RPC.
	TodoDeleteTaskProcedure = "/todoapp.Todo/DeleteTask"
)

// TodoClient is a client for the todoapp.Todo service.
type TodoClient interface {
	CreateTask(context.Context, *v1.CreateTaskRequest) (*v1.CreateTaskResponse, error)
	GetTask(context.Context, *v1.GetTaskRequest) (*v1.GetTaskResponse, error)
	ListTasks(context.Context, *v1.ListTasksRequest) (*v1.ListTasksResponse, error)
	UpdateTask(context.Context, *v1.UpdateTaskRequest) (*v1.UpdateTaskResponse, error)
	DeleteTask(context.Context, *v1.DeleteTaskRequest) (*emptypb.Empty, error)
}

// NewTodoClient constructs a client for the todoapp.Todo service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTodoClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TodoClient {
	baseURL = strings.TrimRight(baseURL, "/")
	todoMethods := v1.File_acme_api_todo_v1_service_proto.Services().ByName("Todo").Methods()
	return &todoClient{
		createTask: connect.NewClient[v1.CreateTaskRequest, v1.CreateTaskResponse](
			httpClient,
			baseURL+TodoCreateTaskProcedure,
			connect.WithSchema(todoMethods.ByName("CreateTask")),
			connect.WithClientOptions(opts...),
		),
		getTask: connect.NewClient[v1.GetTaskRequest, v1.GetTaskResponse](
			httpClient,
			baseURL+TodoGetTaskProcedure,
			connect.WithSchema(todoMethods.ByName("GetTask")),
			connect.WithClientOptions(opts...),
		),
		listTasks: connect.NewClient[v1.ListTasksRequest, v1.ListTasksResponse](
			httpClient,
			baseURL+TodoListTasksProcedure,
			connect.WithSchema(todoMethods.ByName("ListTasks")),
			connect.WithClientOptions(opts...),
		),
		updateTask: connect.NewClient[v1.UpdateTaskRequest, v1.UpdateTaskResponse](
			httpClient,
			baseURL+TodoUpdateTaskProcedure,
			connect.WithSchema(todoMethods.ByName("UpdateTask")),
			connect.WithClientOptions(opts...),
		),
		deleteTask: connect.NewClient[v1.DeleteTaskRequest, emptypb.Empty](
			httpClient,
			baseURL+TodoDeleteTaskProcedure,
			connect.WithSchema(todoMethods.ByName("DeleteTask")),
			connect.WithClientOptions(opts...),
		),
	}
}

// todoClient implements TodoClient.
type todoClient struct {
	createTask *connect.Client[v1.CreateTaskRequest, v1.CreateTaskResponse]
	getTask    *connect.Client[v1.GetTaskRequest, v1.GetTaskResponse]
	listTasks  *connect.Client[v1.ListTasksRequest, v1.ListTasksResponse]
	updateTask *connect.Client[v1.UpdateTaskRequest, v1.UpdateTaskResponse]
	deleteTask *connect.Client[v1.DeleteTaskRequest, emptypb.Empty]
}

// CreateTask calls todoapp.Todo.CreateTask.
func (c *todoClient) CreateTask(ctx context.Context, req *v1.CreateTaskRequest) (*v1.CreateTaskResponse, error) {
	response, err := c.createTask.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// GetTask calls todoapp.Todo.GetTask.
func (c *todoClient) GetTask(ctx context.Context, req *v1.GetTaskRequest) (*v1.GetTaskResponse, error) {
	response, err := c.getTask.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ListTasks calls todoapp.Todo.ListTasks.
func (c *todoClient) ListTasks(ctx context.Context, req *v1.ListTasksRequest) (*v1.ListTasksResponse, error) {
	response, err := c.listTasks.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// UpdateTask calls todoapp.Todo.UpdateTask.
func (c *todoClient) UpdateTask(ctx context.Context, req *v1.UpdateTaskRequest) (*v1.UpdateTaskResponse, error) {
	response, err := c.updateTask.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// DeleteTask calls todoapp.Todo.DeleteTask.
func (c *todoClient) DeleteTask(ctx context.Context, req *v1.DeleteTaskRequest) (*emptypb.Empty, error) {
	response, err := c.deleteTask.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// TodoHandler is an implementation of the todoapp.Todo service.
type TodoHandler interface {
	CreateTask(context.Context, *v1.CreateTaskRequest) (*v1.CreateTaskResponse, error)
	GetTask(context.Context, *v1.GetTaskRequest) (*v1.GetTaskResponse, error)
	ListTasks(context.Context, *v1.ListTasksRequest) (*v1.ListTasksResponse, error)
	UpdateTask(context.Context, *v1.UpdateTaskRequest) (*v1.UpdateTaskResponse, error)
	DeleteTask(context.Context, *v1.DeleteTaskRequest) (*emptypb.Empty, error)
}

// NewTodoHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTodoHandler(svc TodoHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	todoMethods := v1.File_acme_api_todo_v1_service_proto.Services().ByName("Todo").Methods()
	todoCreateTaskHandler := connect.NewUnaryHandlerSimple(
		TodoCreateTaskProcedure,
		svc.CreateTask,
		connect.WithSchema(todoMethods.ByName("CreateTask")),
		connect.WithHandlerOptions(opts...),
	)
	todoGetTaskHandler := connect.NewUnaryHandlerSimple(
		TodoGetTaskProcedure,
		svc.GetTask,
		connect.WithSchema(todoMethods.ByName("GetTask")),
		connect.WithHandlerOptions(opts...),
	)
	todoListTasksHandler := connect.NewUnaryHandlerSimple(
		TodoListTasksProcedure,
		svc.ListTasks,
		connect.WithSchema(todoMethods.ByName("ListTasks")),
		connect.WithHandlerOptions(opts...),
	)
	todoUpdateTaskHandler := connect.NewUnaryHandlerSimple(
		TodoUpdateTaskProcedure,
		svc.UpdateTask,
		connect.WithSchema(todoMethods.ByName("UpdateTask")),
		connect.WithHandlerOptions(opts...),
	)
	todoDeleteTaskHandler := connect.NewUnaryHandlerSimple(
		TodoDeleteTaskProcedure,
		svc.DeleteTask,
		connect.WithSchema(todoMethods.ByName("DeleteTask")),
		connect.WithHandlerOptions(opts...),
	)
	return "/todoapp.Todo/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TodoCreateTaskProcedure:
			todoCreateTaskHandler.ServeHTTP(w, r)
		case TodoGetTaskProcedure:
			todoGetTaskHandler.ServeHTTP(w, r)
		case TodoListTasksProcedure:
			todoListTasksHandler.ServeHTTP(w, r)
		case TodoUpdateTaskProcedure:
			todoUpdateTaskHandler.ServeHTTP(w, r)
		case TodoDeleteTaskProcedure:
			todoDeleteTaskHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTodoHandler returns CodeUnimplemented from all methods.
type UnimplementedTodoHandler struct{}

func (UnimplementedTodoHandler) CreateTask(context.Context, *v1.CreateTaskRequest) (*v1.CreateTaskResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todoapp.Todo.CreateTask is not implemented"))
}

func (UnimplementedTodoHandler) GetTask(context.Context, *v1.GetTaskRequest) (*v1.GetTaskResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todoapp.Todo.GetTask is not implemented"))
}

func (UnimplementedTodoHandler) ListTasks(context.Context, *v1.ListTasksRequest) (*v1.ListTasksResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todoapp.Todo.ListTasks is not implemented"))
}

func (UnimplementedTodoHandler) UpdateTask(context.Context, *v1.UpdateTaskRequest) (*v1.UpdateTaskResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todoapp.Todo.UpdateTask is not implemented"))
}

func (UnimplementedTodoHandler) DeleteTask(context.Context, *v1.DeleteTaskRequest) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todoapp.Todo.DeleteTask is not implemented"))
}
