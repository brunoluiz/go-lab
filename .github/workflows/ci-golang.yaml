name: CI (golang)
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
on:
  push:
    branches:
      - main
  pull_request:

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      monogo: ${{ steps.monogo.outputs.json }}
      entrypoints: ${{ steps.monogo.outputs.entrypoints }}
      impacted_folders: ${{ steps.monogo.outputs.impacted_go_folders }}
      changed: ${{ steps.monogo.outputs.changed }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          fetch-tags: true
      - env:
          DEBUG_CONTEXT: ${{ toJson(github) }}
          DEBUG_JOB_CONTEXT: ${{ toJson(job) }}
          DEBUG_STEPS_CONTEXT: ${{ toJson(steps) }}
          DEBUG_RUNNER_CONTEXT: ${{ toJson(runner) }}
          DEBUG_STRATEGY_CONTEXT: ${{ toJson(strategy) }}
          DEBUG_MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: make ci-debug
      - uses: jdx/mise-action@v3
      - uses: ./.github/actions/cache-go-modules
      - id: monogo
        run: make monogo | tee -a "$GITHUB_OUTPUT" "$GITHUB_STEP_SUMMARY"

  lint:
    name: Lint
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [prepare]
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          fetch-tags: true
      - uses: jdx/mise-action@v3
      - uses: ./.github/actions/cache-go-modules
      - run: make lint files="${{ needs.prepare.outputs.impacted_folders }}"

  test:
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [prepare]
    steps:
      - uses: actions/checkout@v5
      - uses: jdx/mise-action@v3
      - uses: ./.github/actions/cache-go-build
      - uses: ./.github/actions/cache-go-modules
      - run: go env GOMODCACHE
      - run: ls $(go env GOMODCACHE)
      - run: make test

  build:
    if: ${{ needs.prepare.outputs.changed == 'true' }}
    name: Build (${{ matrix.entrypoint.path }})
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: write # required for trivy
      security-events: write # required for trivy
      packages: write # required for docker
      attestations: write # required for cosign
      id-token: write
    needs: [prepare, test]
    strategy:
      matrix:
        entrypoint: ${{ fromJSON(needs.prepare.outputs.entrypoints) }}
    env:
      docker_registry: ghcr.io
      docker_user: ${{ github.actor }}
      docker_password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v5
      - id: details
        run: make ci-details entrypoint="${{ matrix.entrypoint.path }}" | tee -a "$GITHUB_OUTPUT" "$GITHUB_STEP_SUMMARY"
      - uses: jdx/mise-action@v3
      - uses: ./.github/actions/cache-go-modules
      - uses: ./.github/actions/cache-go-build
        with:
          key: ${{ steps.details.outputs.service }}-${{ steps.details.outputs.cmd }}
      - run: make docker-all service="${{ steps.details.outputs.service }}" cmd="${{ steps.details.outputs.cmd }}"
