name: CI

on:
  push:
    branches:
      - main
      - master
  pull_request:

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    timeout-minutes: 1
    outputs:
      build: ${{ steps.build.outputs.config }}
    steps:
      - uses: actions/checkout@v4
      - id: build
        run: |
          config=$(cat .ko.yaml | yq -o json | jq -c)
          echo "config=$config" >> $GITHUB_OUTPUT

  build:
    name: Build (${{ matrix.config.id }})
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [prepare]
    permissions:
      contents: read
      packages: write
      attestations: write
    strategy:
      matrix:
        config: ${{ fromJSON(needs.prepare.outputs.build).builds }}
    steps:
      - uses: actions/checkout@v4
      - uses: ko-build/setup-ko@v0.6
      - uses: sigstore/cosign-installer@v3.5.0

      - name: 'docker: login to github container registry'
        uses: docker/login-action@v2.1.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 'docker: prepare image metadata'
        uses: docker/metadata-action@v5
        id: meta
        with:
          sep-tags: ","
          sep-labels: ","
          tags: |
            type=sha
            type=sha,format=long
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: 'ko: build'
        id: ko
        run: |
          export KO_DOCKER_REPO=ghcr.io/${{ matrix.config.id }}
          digest=$(ko build ${{ matrix.config.main }} --bare --tags '${{ steps.meta.outputs.tags }}' --image-label '${{ steps.meta.outputs.labels }}')
          echo "digest=$digest" >> $GITHUB_OUTPUT

      - name: 'trivy: run vulnerability scanner'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/${{ matrix.config.id }}:sha-${{ github.sha }}'
          image-ref: ${{ steps.ko.outputs.digest }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 'trivy: upload scan results to github security tab'
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 'cosign: sign the images with github oidc token'
        run: cosign sign --yes '${{ steps.ko.outputs.digest }}'
